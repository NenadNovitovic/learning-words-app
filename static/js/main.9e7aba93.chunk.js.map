{"version":3,"sources":["ChooseLanguage.js","WordCheck.js","App.js","index.js"],"names":["ChooseLanguage","mainLang","transLang","changeLanguage","e","target","name","value","onChange","id","type","defaultChecked","WordCheck","useState","shuffleArray","words","map","word","idx","swe","eng","srb","wordsList","setWordsList","wordIndex","setWordIndex","correctWordsCounter","setCorrectWordsCounter","wrongWordsCounter","setWrongWordsCounter","outputMessage","setOutputMessage","inputWordField","useRef","inputArray","array","i","length","j","Math","floor","random","className","onSubmit","preventDefault","inputWord","current","toLowerCase","trim","find","ref","App","mainLanguage","setMainLanguage","translatedLanguage","setTranslatedLanguage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAEe,SAASA,EAAT,GAA+C,IAAtBC,EAAqB,EAArBA,SAASC,EAAY,EAAZA,UAE7C,SAASC,EAAeC,GACD,aAAhBA,EAAEC,OAAOC,KACRL,EAASG,EAAEC,OAAOE,OAElBL,EAAUE,EAAEC,OAAOE,OAI3B,OACI,gCACI,mDACA,2BAAUC,SAAUL,EAAgBM,GAAG,WAAvC,qBACY,uBAAOC,KAAK,QAAQH,MAAM,MAAMD,KAAK,aADjD,WAEY,uBAAOK,gBAAc,EAACD,KAAK,QAAQH,MAAM,MAAMD,KAAK,aAFhE,WAGY,uBAAOI,KAAK,QAAQH,MAAM,MAAMD,KAAK,gBAEjD,iDACA,2BAAUE,SAAUL,EAAgBM,GAAG,YAAvC,qBACY,uBAAOE,gBAAc,EAACD,KAAK,QAAQH,MAAM,MAAMD,KAAK,cADhE,WAEY,uBAAOI,KAAK,QAAQH,MAAM,MAAMD,KAAK,cAFjD,WAGY,uBAAOI,KAAK,QAAQH,MAAM,MAAMD,KAAK,oBCrB9C,SAASM,EAAT,GAA6C,IAAxBX,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,UAC1C,EAAmCW,mBAC/BC,EAAcC,EAAMC,KAAK,SAAEC,EAAKC,GAChC,MAAO,CACHT,GAAGS,EACHC,IAAIF,EAAKE,IACTC,IAAIH,EAAKG,IACTC,IAAIJ,EAAKI,UANjB,mBAAOC,EAAP,KAAmBC,EAAnB,KAUA,EAAkCV,mBAAS,GAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KACA,EAAsDZ,mBAAS,GAA/D,mBAAOa,EAAP,KAA4BC,EAA5B,KACA,EAAkDd,mBAAS,GAA3D,mBAAOe,EAAP,KAA0BC,EAA1B,KACA,EAA0ChB,qBAA1C,mBAAOiB,EAAP,KAAsBC,EAAtB,KACMC,EAAiBC,mBAEvB,SAASnB,EAAaoB,GAElB,IADA,IAAIC,EAAQD,EACHE,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADH,EAEhB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFgC,KAE5BD,EAAMG,GAFsB,KAI3C,OAAOJ,EAyBX,OACI,sBAAKQ,UAAU,iBAAf,UACI,qDACA,uBAAMA,UAAU,WAAhB,cAA6BpB,EAAUE,GAAWvB,MAClD,sBAAM0C,SA1Bd,SAAmBvC,GACfA,EAAEwC,iBAEF,IAAIC,EAAYb,EAAec,QAAQvC,MAAMwC,cAAcC,OACxD1B,EAAU2B,MAAK,SAAAhC,GAChB,OAAOA,EAAKf,GAAW6C,gBAAgBF,MAErClB,EAAuBD,EAAoB,GAC3CK,EAAiB,cAEnBF,EAAqBD,EAAkB,GACvCG,EAAiB,mCAAqCT,EAAUE,GAAWtB,KAE1EsB,EAAU,GAAGF,EAAUe,QACtBd,EAAaT,EAAaQ,IAC1BG,EAAa,IAEbA,EAAaD,EAAU,GAE3BQ,EAAec,QAAQvC,MAAM,IAOzB,SACI,uBAAO2C,IAAKlB,EAAgBtB,KAAK,WAEpCoB,EACD,iDAAoBJ,KACpB,+CAAkBE,EAAlB,UC3CGuB,MAZf,WACE,MAAwCtC,mBAAS,OAAjD,mBAAOuC,EAAP,KAAqBC,EAArB,KACA,EAAoDxC,mBAAS,OAA7D,mBAAOyC,EAAP,KAA2BC,EAA3B,KAEA,OACI,sBAAKb,UAAU,YAAf,UACE,cAAC1C,EAAD,CAAgBC,SAAUoD,EAAiBnD,UAAWqD,IACtD,cAAC3C,EAAD,CAAWX,SAAUmD,EAAclD,UAAWoD,Q,MCPtDE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.9e7aba93.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function ChooseLanguage({mainLang,transLang}) {\r\n\r\n    function changeLanguage(e){\r\n        if(e.target.name===\"mainLang\"){\r\n            mainLang(e.target.value);\r\n        }else{\r\n            transLang(e.target.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <span>Translate from:</span>\r\n            <fieldset onChange={changeLanguage} id=\"mainLang\">\r\n                English <input type=\"radio\" value=\"eng\" name=\"mainLang\"/>\r\n                Swedish <input defaultChecked type=\"radio\" value=\"swe\" name=\"mainLang\"/>\r\n                Serbian <input type=\"radio\" value=\"srb\" name=\"mainLang\"/>\r\n            </fieldset>\r\n            <span>Translate to:</span>\r\n            <fieldset onChange={changeLanguage} id=\"transLang\">\r\n                English <input defaultChecked type=\"radio\" value=\"eng\" name=\"transLang\"/>\r\n                Swedish <input type=\"radio\" value=\"swe\" name=\"transLang\"/>\r\n                Serbian <input type=\"radio\" value=\"srb\" name=\"transLang\"/>\r\n            </fieldset>\r\n        </div>\r\n    )\r\n}\r\n/*            <select name=\"mainLangSelect\" onChange={changeLanguage}>\r\n                <option value=\"eng\">English</option>\r\n                <option  value=\"swe\">Swedish</option>\r\n                <option  value=\"srb\">Serbian</option>\r\n            </select>  \r\n                        <select name=\"transLangSelect\" onChange={changeLanguage}>\r\n                <option  value=\"eng\">English</option>\r\n                <option value=\"swe\">Swedish</option>\r\n                <option value=\"srb\">Serbian</option>\r\n            </select>*/ \r\n/*\r\n<fieldset id=\"mainLang\">\r\n    <input type=\"radio\" value=\"eng\" name=\"mainLang\">\r\n    <input type=\"radio\" value=\"swe\" name=\"mainLang\">\r\n    <input type=\"radio\" value=\"srb\" name=\"mainLang\">\r\n  </fieldset>\r\n\r\n*/","import words from './wordsdata.json'\r\nimport React, { useState,useRef } from 'react'\r\n\r\nexport default function WordCheck( {mainLang, transLang} ) {\r\n    const [wordsList , setWordsList] = useState(\r\n        shuffleArray( words.map( ( word,idx ) => {\r\n        return {\r\n            id:idx,\r\n            swe:word.swe,\r\n            eng:word.eng,\r\n            srb:word.srb\r\n        }\r\n        }))\r\n    )\r\n    const [wordIndex, setWordIndex] = useState(0)\r\n    const [correctWordsCounter, setCorrectWordsCounter] = useState(0)\r\n    const [wrongWordsCounter, setWrongWordsCounter] = useState(0)\r\n    const [outputMessage, setOutputMessage] = useState()\r\n    const inputWordField = useRef();\r\n    \r\n    function shuffleArray(inputArray) {\r\n        let array = inputArray;\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return inputArray;\r\n    }\r\n\r\n    function checkWord(e){\r\n        e.preventDefault();\r\n\r\n        var inputWord = inputWordField.current.value.toLowerCase().trim();\r\n        if(wordsList.find(word=>{\r\n          return word[transLang].toLowerCase()===inputWord;\r\n        })){\r\n            setCorrectWordsCounter(correctWordsCounter+1);\r\n            setOutputMessage(\"Correct!\");\r\n        }else{\r\n          setWrongWordsCounter(wrongWordsCounter+1);\r\n          setOutputMessage(\"Wrong! Correct translation was: \" + wordsList[wordIndex][transLang]);\r\n        }\r\n        if(wordIndex+1>=wordsList.length){\r\n            setWordsList(shuffleArray(wordsList));\r\n            setWordIndex(0)\r\n        }else{\r\n            setWordIndex(wordIndex+1);\r\n        }\r\n        inputWordField.current.value=\"\";\r\n      }\r\n\r\n    return (\r\n        <div className=\"checkContainer\">\r\n            <h1>Translate the word </h1>\r\n            <span className=\"wordSpan\"> {wordsList[wordIndex][mainLang]}</span>\r\n            <form onSubmit={checkWord}>\r\n                <input ref={inputWordField} type=\"text\"/>\r\n            </form>\r\n            {outputMessage}\r\n            <div>Correct words:{correctWordsCounter}</div>\r\n            <div>Wrong words:{wrongWordsCounter} </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\nimport AddingSerbian from './AddingSerbian';\nimport ChooseLanguage from './ChooseLanguage';\nimport WordCheck from './WordCheck'\n\nfunction App() {\n  const [mainLanguage, setMainLanguage] = useState(\"swe\");\n  const [translatedLanguage, setTranslatedLanguage] = useState(\"eng\");\n\n  return (\n      <div className=\"container\">\n        <ChooseLanguage mainLang={setMainLanguage} transLang={setTranslatedLanguage}/>\n        <WordCheck mainLang={mainLanguage} transLang={translatedLanguage}/>\n      </div>\n  );\n}\n\nexport default App;\n\n\n/**/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}